running pytest
Searching for pytest
Best match: pytest 3.7.1
Processing pytest-3.7.1-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/pytest-3.7.1-py2.7.egg
Searching for py>=1.5.0
Best match: py 1.5.4
Processing py-1.5.4-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/py-1.5.4-py2.7.egg
Searching for pluggy>=0.7
Best match: pluggy 0.7.1
Processing pluggy-0.7.1-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/pluggy-0.7.1-py2.7.egg
Searching for pathlib2>=2.2.0
Best match: pathlib2 2.3.2
Processing pathlib2-2.3.2-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/pathlib2-2.3.2-py2.7.egg
Searching for more-itertools>=4.0.0
Best match: more-itertools 4.3.0
Processing more_itertools-4.3.0-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/more_itertools-4.3.0-py2.7.egg
Searching for attrs>=17.4.0
Best match: attrs 18.1.0
Processing attrs-18.1.0-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/attrs-18.1.0-py2.7.egg
Searching for atomicwrites>=1.0
Best match: atomicwrites 1.1.5
Processing atomicwrites-1.1.5-py2.7.egg

Using /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make/.eggs/atomicwrites-1.1.5-py2.7.egg
running egg_info
writing requirements to GSLab_Make.egg-info/requires.txt
writing GSLab_Make.egg-info/PKG-INFO
writing top-level names to GSLab_Make.egg-info/top_level.txt
writing dependency_links to GSLab_Make.egg-info/dependency_links.txt
reading manifest file 'GSLab_Make.egg-info/SOURCES.txt'
writing manifest file 'GSLab_Make.egg-info/SOURCES.txt'
running build_ext
============================= test session starts ==============================
platform darwin -- Python 2.7.15, pytest-3.7.1, py-1.5.4, pluggy-0.7.1
rootdir: /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make, inifile:
collected 97 items

gslab_make_dev/tests/test_clear_dirs.py FF.                              [  3%]
gslab_make_dev/tests/test_delete_files.py ...                            [  6%]
gslab_make_dev/tests/test_execute_command.py FFF                         [  9%]
gslab_make_dev/tests/test_run_lyx.py FFFFFFFFFFFFF                       [ 22%]
gslab_make_dev/tests/test_run_mathematica.py FFFFFFFFF                   [ 31%]
gslab_make_dev/tests/test_run_matlab.py FFFFFFFFF                        [ 41%]
gslab_make_dev/tests/test_run_perl.py FFFFFFFFFF                         [ 51%]
gslab_make_dev/tests/test_run_python.py FFFFFFFFFF                       [ 61%]
gslab_make_dev/tests/test_run_r.py FFFFFFFFFFFFFFF                       [ 77%]
gslab_make_dev/tests/test_run_stata.py FFFFFFFF                          [ 85%]
gslab_make_dev/tests/test_tablefill.py ....                              [ 89%]
gslab_make_dev/tests/test_textfill.py ........                           [ 97%]
gslab_make_dev/tests/test_zip.py ..                                      [100%]

=================================== FAILURES ===================================
______________________ testClearDirs.test_already_exists _______________________

self = <gslab_make_dev.tests.test_clear_dirs.testClearDirs testMethod=test_already_exists>

    def test_already_exists(self):
        os.makedirs('./output_local_empty/')
    
        with nostderrout():
>           clear_dirs('./output_local_empty/')

gslab_make_dev/tests/test_clear_dirs.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "./output_local_empty"',), kwargs = {'shell': True}
retcode = 1, cmd = 'rmdir -rf "./output_local_empty"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "./output_local_empty"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
_________________ testClearDirs.test_already_exists_with_files _________________

self = <gslab_make_dev.tests.test_clear_dirs.testClearDirs testMethod=test_already_exists_with_files>

    def test_already_exists_with_files(self):
        os.makedirs('./output_local_files/')
        newfile = open('./output_local_files/text.txt', 'w+')
        newfile.write('test')
        newfile.close()
        file_list = os.listdir('./output_local_files/')
        self.assertEqual(len(file_list), 1)
    
        with nostderrout():
>           clear_dirs('./output_local_files/')

gslab_make_dev/tests/test_clear_dirs.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "./output_local_files"',), kwargs = {'shell': True}
retcode = 1, cmd = 'rmdir -rf "./output_local_files"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "./output_local_files"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
________________________ testRunCommand.test_custom_log ________________________

self = <gslab_make_dev.tests.test_execute_command.testRunCommand testMethod=test_custom_log>

    def test_custom_log(self):
        self.assertFalse(os.path.isfile('test_data.txt'))
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_execute_command.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
_______________________ testRunCommand.test_default_log ________________________

self = <gslab_make_dev.tests.test_execute_command.testRunCommand testMethod=test_default_log>

    def test_default_log(self):
        self.assertFalse(os.path.isfile('test_data.txt'))
        with nostderrout():
            execute_command(command = 'wzunzip ./input/zip_test_file.zip ./')
        logfile_data = open('../output/make.log', 'rU').readlines()
        search_str1 = 'Unzipping test_data.txt.'
        search_str2 = 'Extracting test_data.txt.'
        found1 = logfile_data[-1].find(search_str1) != -1
        found2 = logfile_data[-1].find(search_str2) != -1
>       self.assertTrue(found1 | found2)
E       AssertionError: False is not true

gslab_make_dev/tests/test_execute_command.py:29: AssertionError
_____________________ testRunCommand.test_independent_log ______________________

self = <gslab_make_dev.tests.test_execute_command.testRunCommand testMethod=test_independent_log>

    def test_independent_log(self):
        self.assertFalse(os.path.isfile('test_data.txt'))
        with nostderrout():
            execute_command(command = 'wzunzip ./input/zip_test_file.zip ./', log = '../output/command.log')
        makelog_data = open('../output/make.log', 'rU').readlines()
        search_str1 = 'Unzipping test_data.txt.'
        search_str2 = 'Extracting test_data.txt.'
        found1 = makelog_data[-1].find(search_str1) != -1
        found2 = makelog_data[-1].find(search_str2) != -1
>       self.assertTrue(found1 | found2)
E       AssertionError: False is not true

gslab_make_dev/tests/test_execute_command.py:58: AssertionError
________________________ testRunLyx.test_bad_executable ________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx', executable = 'nonexistent_lyx_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_lyx_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_lyx_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:69: AssertionError
__________________________ testRunLyx.test_change_dir __________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_change_dir>

    def test_change_dir(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx', changedir = True)
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:90: AssertionError
___________________________ testRunLyx.test_comments ___________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_comments>

    def test_comments(self):
        temp_dir = '../temp/'
        with nostderrout():
            clear_dirs(temp_dir)
            run_lyx(program = './input/lyx_test_file.lyx', doctype = 'comments')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:107: AssertionError
__________________________ testRunLyx.test_custom_log __________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_run_lyx.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
_________________________ testRunLyx.test_default_log __________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:24: AssertionError
__________________________ testRunLyx.test_executable __________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx', executable = 'lyx')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:61: AssertionError
______________________ testRunLyx.test_handout_change_dir ______________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_handout_change_dir>

    def test_handout_change_dir(self):
        temp_dir = '../temp/'
        with nostderrout():
            clear_dirs(temp_dir)
            run_lyx(program = './input/lyx_test_file.lyx', doctype = 'handout', changedir = True)
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:118: AssertionError
________________________ testRunLyx.test_handout_pdfout ________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_handout_pdfout>

    def test_handout_pdfout(self):
        temp_dir = '../temp/'
        with nostderrout():
            clear_dirs(temp_dir)
            run_lyx(program = './input/lyx_test_file.lyx', doctype = 'handout', pdfout = './input/custom_outfile.pdf')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:127: AssertionError
_______________________ testRunLyx.test_independent_log ________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx', log = '../output/lyx.log')
        makelog_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', makelog_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:43: AssertionError
_________________________ testRunLyx.test_no_extension _________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:54: AssertionError
__________________________ testRunLyx.test_no_program __________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_lyx(program = './input/nonexistent_lyx_file.lyx')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_lyx.py:77: AssertionError
____________________________ testRunLyx.test_option ____________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_option>

    def test_option(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx', option = '-e pdf')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:83: AssertionError
____________________________ testRunLyx.test_pdfout ____________________________

self = <gslab_make_dev.tests.test_run_lyx.testRunLyx testMethod=test_pdfout>

    def test_pdfout(self):
        with nostderrout():
            run_lyx(program = './input/lyx_test_file.lyx', pdfout = './input/custom_outfile.pdf')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('LaTeX', logfile_data)
E       AssertionError: 'LaTeX' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_lyx.py:97: AssertionError
____________________ testRunMathematica.test_bad_executable ____________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script.m', executable = 'nonexistent_mathematica_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_mathematica_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_mathematica_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:68: AssertionError
______________________ testRunMathematica.test_change_dir ______________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_change_dir>

    def test_change_dir(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script.m', changedir = True)
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('mathematica test ended', logfile_data)
E       AssertionError: 'mathematica test ended' not found in '\n make.py started: 2018-08-18 12:14:52 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:88: AssertionError
______________________ testRunMathematica.test_custom_log ______________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_run_mathematica.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
_____________________ testRunMathematica.test_default_log ______________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script.m')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('mathematica test ended', logfile_data)
E       AssertionError: 'mathematica test ended' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:24: AssertionError
______________________ testRunMathematica.test_executable ______________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script.m', executable = 'math')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('mathematica test ended', logfile_data)
E       AssertionError: 'mathematica test ended' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:60: AssertionError
___________________ testRunMathematica.test_independent_log ____________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script.m', log = '../output/mathematica.log')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('mathematica test ended', logfile_data)
E       AssertionError: 'mathematica test ended' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:43: AssertionError
_____________________ testRunMathematica.test_no_extension _____________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('mathematica test ended', logfile_data)
E       AssertionError: 'mathematica test ended' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:53: AssertionError
______________________ testRunMathematica.test_no_program ______________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_mathematica(program = './input/nonexistent_mathematica_script.m')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_mathematica.py:76: AssertionError
________________________ testRunMathematica.test_option ________________________

self = <gslab_make_dev.tests.test_run_mathematica.testRunMathematica testMethod=test_option>

    def test_option(self):
        with nostderrout():
            run_mathematica(program = './input/mathematica_test_script.m', option = '-initfile ./input/mathematica_init_script.m')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('mathematica test ended', logfile_data)
E       AssertionError: 'mathematica test ended' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_mathematica.py:82: AssertionError
______________________ testRunMatlab.test_bad_executable _______________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script.m', executable = 'nonexistent_matlab_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_matlab_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_matlab_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_matlab.py:62: AssertionError
________________________ testRunMatlab.test_custom_log _________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_run_matlab.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
________________________ testRunMatlab.test_default_log ________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script.m')
>       self.assert_proper_output('../output/make.log')

gslab_make_dev/tests/test_run_matlab.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/tests/test_run_matlab.py:91: in assert_proper_output
    self.assertIn('0.8147', file_data)
E   AssertionError: '0.8147' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'
________________________ testRunMatlab.test_executable _________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script.m', executable = 'matlab')
>       self.assert_proper_output('../output/make.log')

gslab_make_dev/tests/test_run_matlab.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/tests/test_run_matlab.py:91: in assert_proper_output
    self.assertIn('0.8147', file_data)
E   AssertionError: '0.8147' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'
______________________ testRunMatlab.test_independent_log ______________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script.m', log = '../output/matlab.log')
>       self.assert_proper_output('../output/make.log')

gslab_make_dev/tests/test_run_matlab.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/tests/test_run_matlab.py:91: in assert_proper_output
    self.assertIn('0.8147', file_data)
E   AssertionError: '0.8147' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'
_______________________ testRunMatlab.test_no_extension ________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script')
>       self.assert_proper_output('../output/make.log')

gslab_make_dev/tests/test_run_matlab.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/tests/test_run_matlab.py:91: in assert_proper_output
    self.assertIn('0.8147', file_data)
E   AssertionError: '0.8147' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'
________________________ testRunMatlab.test_no_program _________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_matlab(program = './input/nonexistent_matlab_script.m')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_matlab.py:70: AssertionError
__________________________ testRunMatlab.test_option ___________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_option>

    def test_option(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script.m', option = '-h')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('matlab [-h|-help]', logfile_data)
E           AssertionError: 'matlab [-h|-help]' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_matlab.py:77: AssertionError
___________________________ testRunMatlab.test_wait ____________________________

self = <gslab_make_dev.tests.test_run_matlab.testRunMatlab testMethod=test_wait>

    def test_wait(self):
        with nostderrout():
            run_matlab(program = './input/matlab_test_script_wait1.m')
            run_matlab(program = './input/matlab_test_script_wait2.m')
        file_data = open('../output/make.log', 'rU').read()
>       self.assertIn('1.716', file_data)
E       AssertionError: '1.716' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_matlab.py:86: AssertionError
____________________________ testRunPerl.test_args _____________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_args>

    def test_args(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl', args = '-i \'Input\'')
>       output_data = open('output.txt', 'rU').read()
E       IOError: [Errno 2] No such file or directory: 'output.txt'

gslab_make_dev/tests/test_run_perl.py:81: IOError
_______________________ testRunPerl.test_bad_executable ________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl', executable = 'nonexistent_perl_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_perl_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_perl_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_perl.py:62: AssertionError
_________________________ testRunPerl.test_change_dir __________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_change_dir>

    def test_change_dir(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl', changedir = True)
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_perl.py:87: AssertionError
_________________________ testRunPerl.test_custom_log __________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_run_perl.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
_________________________ testRunPerl.test_default_log _________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_perl.py:23: AssertionError
_________________________ testRunPerl.test_executable __________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl', executable = 'perl')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_perl.py:54: AssertionError
_______________________ testRunPerl.test_independent_log _______________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl', log = '../output/perl.log')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_perl.py:40: AssertionError
________________________ testRunPerl.test_no_extension _________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_perl.py:48: AssertionError
_________________________ testRunPerl.test_no_program __________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_perl(program = './input/nonexistent_perl_script.pl')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_perl.py:70: AssertionError
___________________________ testRunPerl.test_options ___________________________

self = <gslab_make_dev.tests.test_run_perl.testRunPerl testMethod=test_options>

    def test_options(self):
        with nostderrout():
            run_perl(program = './input/perl_test_script.pl', option = '-h')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Options and arguments (and corresponding environment variables):', logfile_data)
E       AssertionError: 'Options and arguments (and corresponding environment variables):' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_perl.py:76: AssertionError
___________________________ testRunPython.test_args ____________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_args>

    def test_args(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py', args = '-i \'Input\'')
>       output_data = open('output.txt', 'rU').read()
E       IOError: [Errno 2] No such file or directory: 'output.txt'

gslab_make_dev/tests/test_run_python.py:81: IOError
______________________ testRunPython.test_bad_executable _______________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py', executable = 'nonexistent_python_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_python_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_python_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_python.py:62: AssertionError
________________________ testRunPython.test_change_dir _________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_change_dir>

    def test_change_dir(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py', changedir = True)
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_python.py:87: AssertionError
________________________ testRunPython.test_custom_log _________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_run_python.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
________________________ testRunPython.test_default_log ________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_python.py:23: AssertionError
________________________ testRunPython.test_executable _________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py', executable = 'python')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_python.py:54: AssertionError
______________________ testRunPython.test_independent_log ______________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py', log = '../output/python.log')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_python.py:40: AssertionError
_______________________ testRunPython.test_no_extension ________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_python(program = './input/python_test_script')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'Test script complete\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_python.py:48: AssertionError
________________________ testRunPython.test_no_program _________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_python(program = './input/nonexistent_python_script.py')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_python.py:70: AssertionError
__________________________ testRunPython.test_options __________________________

self = <gslab_make_dev.tests.test_run_python.testRunPython testMethod=test_options>

    def test_options(self):
        with nostderrout():
            run_python(program = './input/python_test_script.py', option = '-h')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Options and arguments (and corresponding environment variables):', logfile_data)
E       AssertionError: 'Options and arguments (and corresponding environment variables):' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_python.py:76: AssertionError
_________________________ testRunR.test_bad_executable _________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R', executable = 'nonexistent_R_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_R_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_R_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:74: AssertionError
___________________________ testRunR.test_change_dir ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_change_dir>

    def test_change_dir(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R', changedir = True)
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', logfile_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:127: AssertionError
___________________________ testRunR.test_custom_log ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir)

gslab_make_dev/tests/test_run_r.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make_dev/dir_mod.py:215: in clear_dirs
    remove_dir(dir)
gslab_make_dev/dir_mod.py:51: in remove_dir
    subprocess.check_call(command % (options, pathname), shell=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = ('rmdir -rf "../output"',), kwargs = {'shell': True}, retcode = 1
cmd = 'rmdir -rf "../output"'

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command 'rmdir -rf "../output"' returned non-zero exit status 1

/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py:190: CalledProcessError
----------------------------- Captured stderr call -----------------------------
rmdir: illegal option -- r
usage: rmdir [-p] directory ...
__________________________ testRunR.test_default_log ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', logfile_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:24: AssertionError
______________________ testRunR.test_default_log_install _______________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_default_log_install>

    def test_default_log_install(self):
        with nostderrout():
            run_r(package = './input/rinstall_test_package/Ecdat_0.1-6.1.tar.gz')
>       self.assertTrue(self.last_line_equals('../output/make.log', '* DONE (Ecdat)\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_r.py:31: AssertionError
___________________________ testRunR.test_executable ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R', executable = 'R CMD BATCH')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', logfile_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:66: AssertionError
________________________ testRunR.test_independent_log _________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R', log = '../output/R.log')
        makelog_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', makelog_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:49: AssertionError
__________________________ testRunR.test_no_extension __________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_r(program = './input/R_test_script')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', logfile_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:59: AssertionError
___________________________ testRunR.test_no_package ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_no_package>

    def test_no_package(self):
        with nostderrout():
            run_r(package = 'nonexistent_R_package')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_r.py:88: AssertionError
___________________________ testRunR.test_no_program ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_r(program = './input/nonexistent_R_script.R')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_r.py:82: AssertionError
_____________________________ testRunR.test_option _____________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_option>

    def test_option(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R', option = '--no-timing')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', logfile_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:94: AssertionError
_________________________ testRunR.test_option_install _________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_option_install>

    def test_option_install(self):
        self.assertFalse(os.path.isdir('../output/Ecdat/'))
        self.assertFalse(os.path.isfile('../output/Ecdat/INDEX'))
        with nostderrout():
            run_r(package = './input/rinstall_test_package/Ecdat_0.1-6.1.tar.gz', lib = '../output/', option = '--no-data')
>       self.assertTrue(os.path.isdir('../output/Ecdat/'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_r.py:113: AssertionError
____________________________ testRunR.test_r_error _____________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_r_error>

    def test_r_error(self):
        with nostderrout():
            run_r(program = './input/R_test_script_error.R')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('executed with errors', logfile_data)
E       AssertionError: 'executed with errors' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:121: AssertionError
__________________________ testRunR.test_specify_lib ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_specify_lib>

    def test_specify_lib(self):
        self.assertFalse(os.path.isdir('../output/Ecdat/'))
        self.assertFalse(os.path.isfile('../output/Ecdat/INDEX'))
        with nostderrout():
            run_r(package = './input/rinstall_test_package/Ecdat_0.1-6.1.tar.gz', lib = '../output/')
>       self.assertTrue(self.last_line_equals('../output/make.log', '* DONE (Ecdat)\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_r.py:136: AssertionError
___________________________ testRunR.test_two_option ___________________________

self = <gslab_make_dev.tests.test_run_r.testRunR testMethod=test_two_option>

    def test_two_option(self):
        with nostderrout():
            run_r(program = './input/R_test_script.R', option = '--no-timing --slave')
        logfile_data = open('../output/make.log', 'rU').read()
>       self.assertIn('Test script complete', logfile_data)
E       AssertionError: 'Test script complete' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_r.py:103: AssertionError
_______________________ testRunStata.test_bad_executable _______________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_bad_executable>

    def test_bad_executable(self):
        with nostderrout():
            run_stata(program = './input/stata_test_script.do', executable = 'nonexistent_stata_executable')
        logfile_data = open('../output/make.log', 'rU').read()
        if os.name == 'posix':
>           self.assertIn('/bin/sh: nonexistent_stata_executable: command not found', logfile_data)
E           AssertionError: '/bin/sh: nonexistent_stata_executable: command not found' not found in '\n make.py started: 2018-08-18 12:14:53 /Users/jacob/Documents/School/Stanford/RA/Gentzkow/gslab_make \n\n\n'

gslab_make_dev/tests/test_run_stata.py:61: AssertionError
_________________________ testRunStata.test_change_dir _________________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_change_dir>

    def test_change_dir(self):
        os.mkdir('output')
>       os.mkdir('external')
E       OSError: [Errno 17] File exists: 'external'

gslab_make_dev/tests/test_run_stata.py:73: OSError
_________________________ testRunStata.test_custom_log _________________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../output/make.log')
        makelog_file = '../output/custom_make.log'
        output_dir = '../output/'
        with nostderrout():
>           clear_dirs(output_dir, external_dir)
E           NameError: global name 'external_dir' is not defined

gslab_make_dev/tests/test_run_stata.py:31: NameError
________________________ testRunStata.test_default_log _________________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_default_log>

    def test_default_log(self):
        with nostderrout():
            run_stata(program = './input/stata_test_script.do')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'end of do-file\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_stata.py:24: AssertionError
_________________________ testRunStata.test_executable _________________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_executable>

    def test_executable(self):
        with nostderrout():
            if os.name == 'posix':
>               run_stata(program = './input/stata_test_script.do', executable = metadata.default_executables['stataunix'])
E               KeyError: 'stataunix'

gslab_make_dev/tests/test_run_stata.py:51: KeyError
______________________ testRunStata.test_independent_log _______________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_independent_log>

    def test_independent_log(self):
        with nostderrout():
            run_stata(program = './input/stata_test_script.do', log = '../output/stata.log')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'end of do-file\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_stata.py:39: AssertionError
________________________ testRunStata.test_no_extension ________________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_no_extension>

    def test_no_extension(self):
        with nostderrout():
            run_stata(program = './input/stata_test_script')
>       self.assertTrue(self.last_line_equals('../output/make.log', 'end of do-file\n'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_stata.py:46: AssertionError
_________________________ testRunStata.test_no_program _________________________

self = <gslab_make_dev.tests.test_run_stata.testRunStata testMethod=test_no_program>

    def test_no_program(self):
        with nostderrout():
            run_stata(program = './input/nonexistent_stata_script.do')
        logfile_data = open('../output/make.log', 'rU').readlines()
>       self.assertTrue(logfile_data[-1].startswith('CritError:'))
E       AssertionError: False is not true

gslab_make_dev/tests/test_run_stata.py:69: AssertionError
===================== 79 failed, 18 passed in 1.59 seconds =====================
Name                                                Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------
gslab_make_dev/_tests.py                                9      9      0      0     0%   2-18
gslab_make_dev/dir_mod.py                             142     95     62      3    29%   43, 66-142, 156-202, 42->43, 45->48, 48->51
gslab_make_dev/make_link_logs.py                       36     28     16      0    15%   61-75, 86-106
gslab_make_dev/make_links.py                           18     12      4      0    27%   60-78
gslab_make_dev/make_log.py                            166    134     66      1    14%   35-63, 78, 88-89, 99-100, 113-128, 146-172, 191-217, 250-262, 279-297, 313-345, 77->78
gslab_make_dev/private/exceptionclasses.py             11      0      0      0   100%
gslab_make_dev/private/linkdirectives.py              108     92     56      0    10%   14-34, 39-44, 48-49, 53-62, 66-87, 90-102, 106-114, 117-140, 144-157
gslab_make_dev/private/linkdirectives_refactor.py     108    108     56      0     0%   3-157
gslab_make_dev/private/linkslist.py                    55     46     30      0    11%   13-42, 45-49, 52-70
gslab_make_dev/private/linkslist_refactor.py           19     19      2      0     0%   3-32
gslab_make_dev/private/messages.py                     26      0      0      0   100%
gslab_make_dev/private/metadata.py                      6      0      0      0   100%
gslab_make_dev/private/preliminaries.py                98     80     36      0    13%   17-26, 29-38, 43-56, 60-64, 67-72, 81-90, 97-113, 120-141, 144-146
gslab_make_dev/private/preliminaries_refactor.py       43     43      8      0     0%   3-65
gslab_make_dev/private/runprogramdirective.py         101     46     26      2    45%   26, 39-41, 48-56, 77-78, 90-91, 94-95, 98-99, 106-125, 134-135, 145-148, 151-154, 25->26, 87->90
gslab_make_dev/refactor_tests.py                        9      9      0      0     0%   2-18
gslab_make_dev/run_program.py                         112     62     14      0    40%   19-25, 36-41, 52-54, 65-67, 78-80, 87-95, 104-135, 146-148, 155-168, 178
gslab_make_dev/tablefill.py                           141      5     68     10    93%   53, 105, 138, 171, 174, 32->35, 35->37, 52->53, 83->exit, 91->88, 104->105, 122->119, 137->138, 167->171, 173->174
gslab_make_dev/tablefill_info.py                        0      0      0      0   100%
gslab_make_dev/tests/nostderrout.py                    12      0      2      0   100%
gslab_make_dev/tests/test_clear_dirs.py                41      8      8      1    82%   27-29, 42-44, 55-56, 54->55
gslab_make_dev/tests/test_delete_files.py              46      2      4      2    92%   55-56, 51->exit, 54->55
gslab_make_dev/tests/test_execute_command.py           64     19      6      3    69%   30, 39-47, 59-64, 70, 73-74, 67->69, 69->70, 72->73
gslab_make_dev/tests/test_run_lyx.py                  119     26     10      4    77%   25, 33-37, 44-48, 55, 62, 71, 84, 91, 98-99, 108-109, 119, 128-129, 137, 140-141, 68->71, 132->134, 136->137, 139->140
gslab_make_dev/tests/test_run_mathematica.py           84     18     10      5    76%   25, 33-37, 44-47, 54, 61, 70, 89, 95, 97, 100-101, 67->70, 92->94, 94->95, 96->97, 99->100
gslab_make_dev/tests/test_run_matlab.py                81     16      8      4    78%   24, 32-35, 41-43, 49, 55, 64, 79, 87, 92, 99-100, 61->64, 76->79, 95->exit, 98->99
gslab_make_dev/tests/test_run_perl.py                  92     19     14      6    75%   24, 32-35, 41-43, 49, 55, 64, 82, 88, 97-98, 105, 107, 110-111, 61->64, 95->97, 102->104, 104->105, 106->107, 109->110
gslab_make_dev/tests/test_run_python.py                92     19     14      6    75%   24, 32-35, 41-43, 49, 55, 64, 82, 88, 97-98, 105, 107, 110-111, 61->64, 95->97, 102->104, 104->105, 106->107, 109->110
gslab_make_dev/tests/test_run_r.py                    139     33     16      7    73%   25-26, 39-43, 50-53, 60, 67, 76, 95-97, 104-106, 114-115, 128-129, 137-138, 147-148, 155, 157, 159, 162-163, 73->76, 145->147, 152->154, 154->155, 156->157, 158->159, 161->162
gslab_make_dev/tests/test_run_stata.py                 81     17     14      5    75%   32-34, 40-41, 53-54, 63, 74-78, 87-88, 98-99, 50->53, 60->63, 85->87, 92->94, 97->98
gslab_make_dev/tests/test_tablefill.py                 97      2     42      6    94%   145-146, 22->exit, 39->36, 59->45, 76->exit, 140->exit, 144->145
gslab_make_dev/tests/test_textfill.py                  84      2     12      3    95%   139-140, 18->exit, 134->exit, 138->139
gslab_make_dev/tests/test_zip.py                       36      2      4      2    90%   46-47, 42->exit, 45->46
gslab_make_dev/textfill.py                            135      2     60      5    96%   44, 170, 32->35, 35->37, 43->44, 100->exit, 169->170
gslab_make_dev/textfill_info.py                         0      0      0      0   100%
-----------------------------------------------------------------------------------------------
TOTAL                                                2411    973    668     75    54%
