running pytest
running egg_info
writing requirements to GSLab_Make.egg-info/requires.txt
writing GSLab_Make.egg-info/PKG-INFO
writing top-level names to GSLab_Make.egg-info/top_level.txt
writing dependency_links to GSLab_Make.egg-info/dependency_links.txt
reading manifest file 'GSLab_Make.egg-info/SOURCES.txt'
writing manifest file 'GSLab_Make.egg-info/SOURCES.txt'
running build_ext
============================= test session starts ==============================
platform darwin -- Python 2.7.13, pytest-3.2.1, py-1.4.34, pluggy-0.4.0
rootdir: /Users/danielagonzalez/gslab_make, inifile:
collected 62 items

gslab_make/tests/test_clear_dir.py ...
gslab_make/tests/test_execute_command.py ..F
gslab_make/tests/test_remove_path.py ....
gslab_make/tests/test_run_lyx.py FFFFFFF.FF
gslab_make/tests/test_run_mathematica.py FFFFF.F
gslab_make/tests/test_run_perl.py .FFFF.
gslab_make/tests/test_run_python.py .FFFF.
gslab_make/tests/test_run_r.py FFFFFFFFF
gslab_make/tests/test_tablefill.py ....
gslab_make/tests/test_textfill.py ........
gslab_make/tests/test_zip.py ..

=================================== FAILURES ===================================
___________________ testExecuteCommand.test_independent_log ____________________

self = <gslab_make.tests.test_execute_command.testExecuteCommand testMethod=test_independent_log>

    def test_independent_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        independent_log = {'makelog' : '../log/command.log'}
        start_makelog(default_makelog)
        if os.name=='posix':
            our_unzip = 'unzip gslab_make/tests/input/zip_test_file.zip'
        else:
            our_unzip = 'wzunzip gslab_make/tests/input/zip_test_file.zip'
        with nostderrout():
>           execute_command(independent_log, our_unzip)

gslab_make/tests/test_execute_command.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:572: in execute_command
    write_to_makelog(paths, error_message)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/command.log'}
message = '********************************************************************************
Error with `execute_command`
*******...rror: ERROR! Makelog `/Users/danielagonzalez/log/command.log` not found (either not started or deleted after started)
'

    def write_to_makelog(paths, message):
        """ Append message to make log.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        message : str
            Message to append.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        if makelog:
            makelog = norm_path(makelog)
    
            if not (metadata.makelog_started and os.path.isfile(makelog)):
>               raise CritError(messages.crit_error_no_makelog % makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/log/command.log` not found (either not started or deleted after started)

gslab_make/write_logs.py:111: CritError
----------------------------- Captured stdout call -----------------------------
Starting makelog file at: "/Users/danielagonzalez/log/make.log"
________________________ testRunLyx.test_bad_executable ________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_bad_executable>

    def test_bad_executable(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
        with self.assertRaises(CritError):
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx', executable = 'nonexistent_lyx_executable')

gslab_make/tests/test_run_lyx.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'executable': 'nonexistent_lyx_executable', 'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
___________________________ testRunLyx.test_comments ___________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_comments>

    def test_comments(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx', doctype = 'comments')

gslab_make/tests/test_run_lyx.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'doctype': 'comments', 'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
__________________________ testRunLyx.test_custom_log __________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_custom_log>

    def test_custom_log(self):
        makelog_file = {'makelog' : '../log/custom_make.log'}
        with nostderrout():
            start_makelog(makelog_file)
>           run_lyx(makelog_file, program = 'gslab_make/tests/input/lyx_test_file.lyx')

gslab_make/tests/test_run_lyx.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/custom_make.log'}
kwargs = {'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/custom_make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
_________________________ testRunLyx.test_default_log __________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_default_log>

    def test_default_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx')

gslab_make/tests/test_run_lyx.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
__________________________ testRunLyx.test_executable __________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_executable>

    def test_executable(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx', executable = metadata.default_executables[os.name]['lyx'])

gslab_make/tests/test_run_lyx.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'executable': 'lyx', 'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
________________________ testRunLyx.test_handout_pdfout ________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_handout_pdfout>

    def test_handout_pdfout(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx', doctype = 'handout', pdfout = '../output')

gslab_make/tests/test_run_lyx.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'doctype': 'handout', 'pdfout': '../output', 'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
_______________________ testRunLyx.test_independent_log ________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_independent_log>

    def test_independent_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        independent_log = {'makelog' : '../log/lyx.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(independent_log, program = 'gslab_make/tests/input/lyx_test_file.lyx')

gslab_make/tests/test_run_lyx.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/lyx.log'}
kwargs = {'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/lyx.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
____________________________ testRunLyx.test_option ____________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_option>

    def test_option(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx', option = '-e pdf')

gslab_make/tests/test_run_lyx.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'option': '-e pdf', 'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
____________________________ testRunLyx.test_pdfout ____________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_pdfout>

    def test_pdfout(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_lyx(default_makelog, program = 'gslab_make/tests/input/lyx_test_file.lyx', pdfout = '../log')

gslab_make/tests/test_run_lyx.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'pdfout': '../log', 'program': 'gslab_make/tests/input/lyx_test_file.lyx'}
makelog = '../log/make.log'

    def run_lyx(paths, **kwargs):
        """ Run LyX script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
                'pdf_dir' : str
                    Directory to write PDFs.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
        doctype : str, optional
           Type of Lyx document. Takes either `handout` and `comments`.
           Defaults to no special document type.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
>       pdf_dir = paths['pdf_dir']
E       KeyError: u'pdf_dir'

gslab_make/run_program.py:375: KeyError
____________________ testRunMathematica.test_bad_executable ____________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_bad_executable>

    def test_bad_executable(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_mathematica(makelog_file, program = 'gslab_make/tests/input/mathematica_test_script.m', executable = 'nonexistent_mathematica_executable')

gslab_make/tests/test_run_mathematica.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'executable': 'nonexistent_mathematica_executable'}
makelog = '../log/make.log'
program = 'gslab_make/tests/input/mathematica_test_script.m'
error_message = "********************************************************************************
Error with `run_mathematica`
*******...= ProgramDirective('math', program **kwargs)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'
"

    def run_mathematica(paths, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
        program = kwargs['program']
        del kwargs['program']
    
        try:
>           direct = ProgramDirective('math', program **kwargs)
E           TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'

gslab_make/run_program.py:270: TypeError
______________________ testRunMathematica.test_custom_log ______________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../log/make.log')
        makelog_file = {'makelog' : '../log/custom_make.log'}
        with nostderrout():
            start_makelog(makelog_file)
>           run_mathematica(makelog_file, program = 'gslab_make/tests/input/mathematica_test_script.m')

gslab_make/tests/test_run_mathematica.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/custom_make.log'}, kwargs = {}
makelog = '../log/custom_make.log'
program = 'gslab_make/tests/input/mathematica_test_script.m'
error_message = "********************************************************************************
Error with `run_mathematica`
*******...= ProgramDirective('math', program **kwargs)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'
"

    def run_mathematica(paths, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
        program = kwargs['program']
        del kwargs['program']
    
        try:
>           direct = ProgramDirective('math', program **kwargs)
E           TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'

gslab_make/run_program.py:270: TypeError
_____________________ testRunMathematica.test_default_log ______________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_default_log>

    def test_default_log(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_mathematica(makelog_file, program = 'gslab_make/tests/input/mathematica_test_script.m')

gslab_make/tests/test_run_mathematica.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}, kwargs = {}, makelog = '../log/make.log'
program = 'gslab_make/tests/input/mathematica_test_script.m'
error_message = "********************************************************************************
Error with `run_mathematica`
*******...= ProgramDirective('math', program **kwargs)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'
"

    def run_mathematica(paths, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
        program = kwargs['program']
        del kwargs['program']
    
        try:
>           direct = ProgramDirective('math', program **kwargs)
E           TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'

gslab_make/run_program.py:270: TypeError
______________________ testRunMathematica.test_executable ______________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_executable>

    def test_executable(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_mathematica(makelog_file, program = 'gslab_make/tests/input/mathematica_test_script.m', executable = metadata.default_executables[os.name]['math'])

gslab_make/tests/test_run_mathematica.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}, kwargs = {'executable': 'math'}
makelog = '../log/make.log'
program = 'gslab_make/tests/input/mathematica_test_script.m'
error_message = "********************************************************************************
Error with `run_mathematica`
*******...= ProgramDirective('math', program **kwargs)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'
"

    def run_mathematica(paths, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
        program = kwargs['program']
        del kwargs['program']
    
        try:
>           direct = ProgramDirective('math', program **kwargs)
E           TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'

gslab_make/run_program.py:270: TypeError
___________________ testRunMathematica.test_independent_log ____________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_independent_log>

    def test_independent_log(self):
        makelog_file = {'makelog' : '../log/mathematica.log'}
        with nostderrout():
>           run_mathematica(makelog_file, program = 'gslab_make/tests/input/mathematica_test_script.m')

gslab_make/tests/test_run_mathematica.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:281: in run_mathematica
    write_to_makelog(paths, error_message)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/mathematica.log'}
message = "********************************************************************************
Error with `run_mathematica`
*******...= ProgramDirective('math', program **kwargs)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'
"

    def write_to_makelog(paths, message):
        """ Append message to make log.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        message : str
            Message to append.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        if makelog:
            makelog = norm_path(makelog)
    
            if not (metadata.makelog_started and os.path.isfile(makelog)):
>               raise CritError(messages.crit_error_no_makelog % makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/log/mathematica.log` not found (either not started or deleted after started)

gslab_make/write_logs.py:111: CritError
________________________ testRunMathematica.test_option ________________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_option>

    def test_option(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_mathematica(makelog_file, program = 'gslab_make/tests/input/mathematica_test_script.m', option = '-initfile gslab_make/tests/input/mathematica_init_script.m')

gslab_make/tests/test_run_mathematica.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/make.log'}
kwargs = {'option': '-initfile gslab_make/tests/input/mathematica_init_script.m'}
makelog = '../log/make.log'
program = 'gslab_make/tests/input/mathematica_test_script.m'
error_message = "********************************************************************************
Error with `run_mathematica`
*******...= ProgramDirective('math', program **kwargs)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'
"

    def run_mathematica(paths, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `False`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        program : str
            Path of script to run.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
        program = kwargs['program']
        del kwargs['program']
    
        try:
>           direct = ProgramDirective('math', program **kwargs)
E           TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'dict'

gslab_make/run_program.py:270: TypeError
_________________________ testRunPerl.test_custom_log __________________________

self = <gslab_make.tests.test_run_perl.testRunPerl testMethod=test_custom_log>

    def test_custom_log(self):
        makelog_file = {'makelog' : '../log/custom_make.log'}
        with nostderrout():
            start_makelog(makelog_file)
>           run_perl(makelog_file, program = 'gslab_make/tests/input/perl_test_script.pl')

gslab_make/tests/test_run_perl.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:171: in run_perl
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb5f390>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/perl` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
_________________________ testRunPerl.test_default_log _________________________

self = <gslab_make.tests.test_run_perl.testRunPerl testMethod=test_default_log>

    def test_default_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_perl(default_makelog, program = 'gslab_make/tests/input/perl_test_script.pl')

gslab_make/tests/test_run_perl.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:171: in run_perl
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb52f50>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/perl` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
_________________________ testRunPerl.test_executable __________________________

self = <gslab_make.tests.test_run_perl.testRunPerl testMethod=test_executable>

    def test_executable(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_perl(default_makelog, program = 'gslab_make/tests/input/perl_test_script.pl', executable = metadata.default_executables[os.name]['perl'])

gslab_make/tests/test_run_perl.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:171: in run_perl
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb3d350>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/perl` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
_______________________ testRunPerl.test_independent_log _______________________

self = <gslab_make.tests.test_run_perl.testRunPerl testMethod=test_independent_log>

    def test_independent_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        independent_log = {'makelog' : '../log/perl.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_perl(independent_log, program = 'gslab_make/tests/input/perl_test_script.pl')

gslab_make/tests/test_run_perl.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:177: in run_perl
    write_to_makelog(paths, error_message)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/perl.log'}
message = '********************************************************************************
Error with `run_perl`
**************...rror: ERROR! Makelog `/Users/danielagonzalez/gslab_make/perl` not found (either not started or deleted after started)
'

    def write_to_makelog(paths, message):
        """ Append message to make log.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        message : str
            Message to append.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        if makelog:
            makelog = norm_path(makelog)
    
            if not (metadata.makelog_started and os.path.isfile(makelog)):
>               raise CritError(messages.crit_error_no_makelog % makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/log/perl.log` not found (either not started or deleted after started)

gslab_make/write_logs.py:111: CritError
________________________ testRunPython.test_custom_log _________________________

self = <gslab_make.tests.test_run_python.testRunPython testMethod=test_custom_log>

    def test_custom_log(self):
        makelog_file = {'makelog' : '../log/custom_make.log'}
        with nostderrout():
            start_makelog(makelog_file)
>           run_python(makelog_file, program = 'gslab_make/tests/input/python_test_script.py')

gslab_make/tests/test_run_python.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:223: in run_python
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb5f4d0>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/python` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
________________________ testRunPython.test_default_log ________________________

self = <gslab_make.tests.test_run_python.testRunPython testMethod=test_default_log>

    def test_default_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_python(default_makelog, program = 'gslab_make/tests/input/python_test_script.py')

gslab_make/tests/test_run_python.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:223: in run_python
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10f4aee10>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/python` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
________________________ testRunPython.test_executable _________________________

self = <gslab_make.tests.test_run_python.testRunPython testMethod=test_executable>

    def test_executable(self):
        default_makelog = {'makelog' : '../log/make.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_python(default_makelog, program = 'gslab_make/tests/input/python_test_script.py', executable = metadata.default_executables[os.name]['python'])

gslab_make/tests/test_run_python.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:223: in run_python
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb00d90>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/python` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
______________________ testRunPython.test_independent_log ______________________

self = <gslab_make.tests.test_run_python.testRunPython testMethod=test_independent_log>

    def test_independent_log(self):
        default_makelog = {'makelog' : '../log/make.log'}
        independent_log = {'makelog': '../log/python.log'}
        with nostderrout():
            start_makelog(default_makelog)
>           run_python(independent_log, program = 'gslab_make/tests/input/python_test_script.py')

gslab_make/tests/test_run_python.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:229: in run_python
    write_to_makelog(paths, error_message)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/python.log'}
message = '********************************************************************************
Error with `run_python`
************...or: ERROR! Makelog `/Users/danielagonzalez/gslab_make/python` not found (either not started or deleted after started)
'

    def write_to_makelog(paths, message):
        """ Append message to make log.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        message : str
            Message to append.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        if makelog:
            makelog = norm_path(makelog)
    
            if not (metadata.makelog_started and os.path.isfile(makelog)):
>               raise CritError(messages.crit_error_no_makelog % makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/log/python.log` not found (either not started or deleted after started)

gslab_make/write_logs.py:111: CritError
_________________________ testRunR.test_bad_executable _________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_bad_executable>

    def test_bad_executable(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R', executable = 'nonexistent_R_executable')

gslab_make/tests/test_run_r.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:466: in run_r
    exit_code, error_message = direct.execute_command(command)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10f50f950>
command = 'nonexistent_R_executable --no-save /Users/danielagonzalez/gslab_make/gslab_make/tests/input/R_test_script.R'

    def execute_command(self, command):
        """ Execute shell command.
    
            Parameters
            ----------
            command : str
                Shell command to execute.
    
            Returns
            -------
            exit : tuple
                Tuple (exit code, error message) for shell command.
            """
    
        self.output = 'Executing: "%s"' % command
        print(self.output)
    
        try:
             process = subprocess.Popen(command.split(),
                                        stdout = subprocess.PIPE,
                                        stderr = subprocess.PIPE,
                                        shell = self.shell)
             stdout, stderr = process.communicate()
             exit = (process.returncode, stderr)
    
             if stdout:
                self.output += '\n' + stdout
             if stderr:
                self.output += '\n' + stderr
    
             return(exit)
        except:
>            raise CritError(messages.crit_error_bad_command % command)
E            CritError: ERROR! Command `nonexistent_R_executable --no-save /Users/danielagonzalez/gslab_make/gslab_make/tests/input/R_test_script.R` cannot be executed by operating system

gslab_make/private/programdirective.py:107: CritError
___________________________ testRunR.test_custom_log ___________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_custom_log>

    def test_custom_log(self):
        os.remove('../log/make.log')
        makelog_file = {'makelog' : '../log/custom_make.log'}
        output_dir = '../output/'
        with nostderrout():
            start_makelog(makelog_file)
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R')

gslab_make/tests/test_run_r.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:467: in run_r
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb18410>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
__________________________ testRunR.test_default_log ___________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_default_log>

    def test_default_log(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R')

gslab_make/tests/test_run_r.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:467: in run_r
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb3d990>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
___________________________ testRunR.test_executable ___________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_executable>

    def test_executable(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R', executable = 'R CMD BATCH')

gslab_make/tests/test_run_r.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:467: in run_r
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb7f450>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
________________________ testRunR.test_independent_log _________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_independent_log>

    def test_independent_log(self):
        makelog_file = {'makelog' : '../log/R.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R')

gslab_make/tests/test_run_r.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:473: in run_r
    write_to_makelog(paths, error_message)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': '../log/R.log'}
message = '********************************************************************************
Error with `run_r`
*****************...itError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)
'

    def write_to_makelog(paths, message):
        """ Append message to make log.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        message : str
            Message to append.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        if makelog:
            makelog = norm_path(makelog)
    
            if not (metadata.makelog_started and os.path.isfile(makelog)):
>               raise CritError(messages.crit_error_no_makelog % makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/log/R.log` not found (either not started or deleted after started)

gslab_make/write_logs.py:111: CritError
___________________________ testRunR.test_no_program ___________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_no_program>

    def test_no_program(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with self.assertRaises(Exception):
             run_r(makelog_file, program = 'gslab_make/tests/input/nonexistent_R_script.R')
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/nonexistent_R_script.R')

gslab_make/tests/test_run_r.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:462: in run_r
    direct = ProgramDirective('r', program, **kwargs)
gslab_make/private/programdirective.py:183: in __init__
    self.check_program()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fbf3dd0>

    def check_program(self):
        """ Check program exists and has correct extension given application.
    
            Returns
            -------
            None
            """
    
        if not os.path.isfile(self.program):
>           raise CritError(messages.crit_error_no_file % self.program)
E           CritError: ERROR! File `/Users/danielagonzalez/gslab_make/gslab_make/tests/input/nonexistent_R_script.R` not found

gslab_make/private/programdirective.py:209: CritError
_____________________________ testRunR.test_option _____________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_option>

    def test_option(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R', option = '--no-timing')

gslab_make/tests/test_run_r.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:467: in run_r
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb4ed90>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
____________________________ testRunR.test_r_error _____________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_r_error>

    def test_r_error(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script_error.R')

gslab_make/tests/test_run_r.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:467: in run_r
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10faf4190>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
___________________________ testRunR.test_two_option ___________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_two_option>

    def test_two_option(self):
        makelog_file = {'makelog' : '../log/make.log'}
        with nostderrout():
>           run_r(makelog_file, program = 'gslab_make/tests/input/R_test_script.R', option = '--no-timing --slave')

gslab_make/tests/test_run_r.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
gslab_make/run_program.py:467: in run_r
    direct.write_log()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gslab_make.private.programdirective.ProgramDirective object at 0x10fb1c550>

    def write_log(self):
        """ Write logs for shell command.
    
            Returns
            -------
            None
            """
    
        if self.makelog:
            if not (metadata.makelog_started and os.path.isfile(self.makelog)):
>               raise CritError(messages.crit_error_no_makelog % self.makelog)
E               CritError: ERROR! Makelog `/Users/danielagonzalez/gslab_make/r` not found (either not started or deleted after started)

gslab_make/private/programdirective.py:120: CritError
==================== 33 failed, 29 passed in 15.46 seconds =====================
Name                                       Stmts   Miss Branch BrPart  Cover   Missing
--------------------------------------------------------------------------------------
gslab_make/create_links.py                    20     12      0      0    40%   36-50
gslab_make/dir_mod.py                         46      4     20      2    88%   25-26, 73, 79, 70->73, 78->79
gslab_make/private/exceptionclasses.py         4      0      0      0   100%
gslab_make/private/linkdirective.py          107     79     34      0    20%   47-53, 63-64, 74-82, 92-100, 110-118, 139-146, 167-171, 181-186, 196-198, 207-214, 242-246, 256-264, 274-275, 285-291, 302-306
gslab_make/private/messages.py                20      0      0      0   100%
gslab_make/private/metadata.py                 7      0      0      0   100%
gslab_make/private/programdirective.py       102     26     30      4    70%   63, 125-126, 212, 252-267, 289-290, 317-320, 330-332, 62->63, 118->124, 124->125, 211->212
gslab_make/private/utility.py                 36     17      6      0    45%   45-62, 79-82
gslab_make/run_program.py                    193    111     34      1    37%   50-71, 106-126, 172-173, 224-225, 273-277, 317-334, 377-422, 468-469, 511-531, 568, 573, 567->568
gslab_make/tablefill.py                      141      5     68     10    93%   53, 105, 138, 171, 174, 32->35, 35->37, 52->53, 83->exit, 91->88, 104->105, 122->119, 137->138, 167->171, 173->174
gslab_make/tablefill_info.py                   0      0      0      0   100%
gslab_make/tests/nostderrout.py               12      0      2      0   100%
gslab_make/tests/test_clear_dir.py            41      2      8      1    94%   55-56, 54->55
gslab_make/tests/test_execute_command.py      53      8     12      6    78%   27, 39, 52, 55-57, 66-67, 24->27, 36->39, 49->52, 60->62, 62->exit, 65->66
gslab_make/tests/test_remove_path.py          56      3      6      2    92%   63, 68-69, 62->63, 67->68
gslab_make/tests/test_run_lyx.py             109     36      8      4    66%   24-26, 33-35, 43-49, 56-58, 66-68, 83-85, 92-95, 102-105, 112-115, 126-127, 118->120, 120->122, 122->exit, 125->126
gslab_make/tests/test_run_mathematica.py      69     16     10      5    73%   25-26, 34-35, 41-44, 50-51, 57, 69, 77, 79, 82-83, 72->74, 74->76, 76->77, 78->79, 81->82
gslab_make/tests/test_run_matlab.py            0      0      0      0   100%
gslab_make/tests/test_run_perl.py             65     11      8      3    81%   23-24, 31-32, 40-42, 49-50, 77-78, 69->71, 71->73, 76->77
gslab_make/tests/test_run_python.py           65     11      8      3    81%   23-24, 31-32, 40-42, 49-50, 77-78, 69->71, 71->73, 76->77
gslab_make/tests/test_run_r.py                94     30     12      5    67%   24-27, 42-43, 49-52, 58-59, 65, 73-74, 87-91, 97-101, 117, 137, 139, 142-143, 130->132, 132->134, 136->137, 138->139, 141->142
gslab_make/tests/test_run_stata.py             0      0      0      0   100%
gslab_make/tests/test_tablefill.py            96      2     42      6    94%   143-144, 20->exit, 37->34, 57->43, 74->exit, 138->exit, 142->143
gslab_make/tests/test_textfill.py             83      2     12      3    95%   138-139, 17->exit, 133->exit, 137->138
gslab_make/tests/test_zip.py                  35      2      4      2    90%   45-46, 41->exit, 44->45
gslab_make/textfill.py                       135      2     60      5    96%   44, 170, 32->35, 35->37, 43->44, 100->exit, 169->170
gslab_make/textfill_info.py                    0      0      0      0   100%
gslab_make/write_link_logs.py                 29     22      2      0    23%   51-70, 87-93
gslab_make/write_logs.py                      83     49     22      2    36%   69-84, 151-166, 191-201, 221-240, 40->exit, 107->exit
--------------------------------------------------------------------------------------
TOTAL                                       1701    450    408     64    71%
